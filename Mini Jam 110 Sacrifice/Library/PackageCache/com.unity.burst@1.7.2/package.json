{
  "name": "com.unity.burst",
  "displayName": "Burst",
  "version": "1.7.2",
  "unity": "2019.4",
  "description": "Burst is a compiler that translates from IL/.NET bytecode to highly optimized native code using LLVM.",
  "dependencies": {
    "com.unity.mathematics": "1.2.1"
  },
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/burst.git",
    "type": "git",
    "revision": "e9c3ba54b98274669b3ce4e806f5772398ed708f"
  },
  "_upm": {
    "changelog": "### Fixed\n- Fixed internal compiler error when encountering a `calli` with closed generics\n- Fixed bug where disabling native debug mode, after having previously enabled it in the same editor session, didn't in fact disable native debug mode\n- Fixed a regression where out parameters of C# 9.0 function pointers weren't working in Burst.\n- Fixed bug in static constructor ordering in the presence of indirect dependencies between static constructors (i.e. static constructor -> static method -> static constructor) that could result in a runtime crash\n- Fixed a bug that manifested when using IAP in UWP builds with Burst - we were scanning the assembly hierarchy too deep for Bursted types, which led to an `AssemblyResolutionException`.\n- Added workaround for \"cannot dlopen until fork() handlers have completed\" issue seen in macOS 12.3\n- Fix compiler crash when the only usage of a static field was in a formatted exception string\n- Fixed compiler crash when trying to dynamically call `BurstCompiler.CompileFunctionPointer`  in Burst-compiled code\n- Fix burst inspector sometimes stalling during loading for script reloads.\n- Fixed a bug with `Span` and `ReadOnlySpan` types where if the indices used were not already 32-bit signed integers, an internal compiler error would occur if running with safety checks enabled.\n- Fixed a really convoluted bug that could manifest in Burst returning out of date cached libraries, which would manifest as random exceptions in Burst jobs/function-pointers (users deleting the BurstCache would workaround the bug).\n- Fixed hashing bug that could occur when a function pointer type is used in a method parameter\n- Fixed a compiler crash if users used `__refvalue` or `__arglist` in Burst. Neither of these are supported, but now we will nicely tell you via a compiler error that they aren't supported.\n- Fixed hashing error that could occur in the presence of multiple synthesized explicit interface implementations with the same name and signature\n- Fixed a compiler error when trying to acquire the function pointer of a generic function from Bursted code.\n- Using a function only through a C# function pointer could cause a crash\n\n### Added\n- Added support for the `System.Runtime.CompilerServices.IsExternalInit` workaround documented [here](https://docs.unity3d.com/2022.1/Documentation/Manual/CSharpCompiler.html) into Burst when used in 2022.1+.\n\n### Changed\n- Changed how we process static readonly fields in static constructors such that we'll allow more computational budget per static field. This fixes the case where having too many static readonly variables in a single static constructor could fail to compile, while they would work if each was in their own static constructors.\n- SDK Updates."
  },
  "upmCi": {
    "footprint": "b9a99d22e5b7aa3e7ac33711541a9c6431a0b280"
  }
}
